/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.AviationOrg.AviationOrg;
import Business.AviationOrg.AviationOrgAdmin;
import Business.AviationOrg.AviationOrgEmployee;
import Business.Customer.Customer;
import Business.DefenseOrg.DefenseOrg;
import Business.DefenseOrg.DefenseOrgAdmin;
import Business.DefenseOrg.DefenseOrgEmployee;
import Business.EcoSystem;
import Business.Hospital.Hospital;
import Business.Hospital.HospitalAdmin;
import Business.PharmaOrg.PharmaOrg;
import Business.PharmaOrg.PharmaOrgAdmin;
import Business.PharmaOrg.PharmaOrgEmployee;
import Business.ScubaOrg.ScubaOrg;
import Business.ScubaOrg.ScubaOrgAdmin;
import Business.ScubaOrg.ScubaOrgEmployee;
import Business.WaterDepartment.WaterTreatmentOrg;
import Business.WaterDepartment.WaterTreatmentOrgAdmin;
import Business.WaterDepartment.WaterTreatmentOrgEmployee;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nithin Bharadwaj
 */
public class ManageBusinessAssistant extends javax.swing.JPanel {

    /**
     * Creates new form UpdateCustomerDetails
     */
    JPanel userProcessContainer;
    EcoSystem system;
    
    public ManageBusinessAssistant(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.system = system;
        this.userProcessContainer = userProcessContainer;
//        this.populateTable();
//        txtName.setEditable(false);
//        txtUsername.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomerDetails = new javax.swing.JTable();
        btnView = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        lbPassword = new javax.swing.JLabel();
        lbName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        lbUsername = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        txtpassword = new javax.swing.JPasswordField();
        lbPassword1 = new javax.swing.JLabel();
        lbPassword2 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtPhoneNumber = new javax.swing.JTextField();
        comboRole = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(246, 252, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lbTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitle.setText("Manage Business Employee Details");
        add(lbTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(167, 36, 451, -1));

        tblCustomerDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "UserName", "Password", "Address", "PhoneNumber", "Business Name"
            }
        ));
        jScrollPane1.setViewportView(tblCustomerDetails);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(103, 128, 586, 96));

        btnView.setText("View");
        btnView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewActionPerformed(evt);
            }
        });
        add(btnView, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 236, 96, -1));

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        add(btnDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(593, 268, 96, -1));

        txtUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUsernameActionPerformed(evt);
            }
        });
        add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 303, 159, -1));

        btnSubmit.setText("Update");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 461, -1, -1));

        lbPassword.setText("Password :");
        add(lbPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(283, 346, -1, -1));

        lbName.setText("Name :");
        add(lbName, new org.netbeans.lib.awtextra.AbsoluteConstraints(306, 273, -1, -1));
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 268, 159, -1));

        lbUsername.setText("Username :");
        add(lbUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 308, -1, -1));

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/back.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 36, 58, 54));
        add(txtpassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 341, 159, -1));

        lbPassword1.setText("Address :");
        add(lbPassword1, new org.netbeans.lib.awtextra.AbsoluteConstraints(291, 384, -1, -1));

        lbPassword2.setText("Phone Number :");
        add(lbPassword2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 428, -1, -1));
        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 379, 159, -1));
        add(txtPhoneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(368, 423, 159, -1));

        comboRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Pharma Employee", "Defense Employee", "Aviation Employee", "Scuba Employee", "WaterPlant Employee" }));
        comboRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRoleActionPerformed(evt);
            }
        });
        add(comboRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(332, 83, 180, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel1.setText("Role :");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(247, 88, 48, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/business01.gif"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 1100, 780));
    }// </editor-fold>//GEN-END:initComponents

    private void txtUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUsernameActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        Component[] comps = this.userProcessContainer.getComponents();
        for(Component comp : comps){
            if(comp instanceof SystemAdminWorkAreaJPanel){
                SystemAdminWorkAreaJPanel systemAdminWorkAreaJPanel= (SystemAdminWorkAreaJPanel) comp;
                systemAdminWorkAreaJPanel.populateTree();
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCustomerDetails.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCustomerDetails.getModel();
        String roleSelected = comboRole.getSelectedItem().toString();
        if(roleSelected == "Pharma Employee"){
            PharmaOrgEmployee selectedCustomer = (PharmaOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            String name = txtName.getText();
            String userName = txtUsername.getText();
            String password = txtpassword.getText();
            
            ArrayList<PharmaOrg> restos = this.system.getPharmaDirectory().returnAllPharmaBusinesss();
            for(PharmaOrg r: restos)
            {
                if(r.getBusinessEmployee().getName().equals(selectedCustomer.getName()))
                {
                    r.getBusinessEmployee().setName(name);
                    r.getBusinessEmployee().returnUserAccount().setUsername(userName);
                    r.getBusinessEmployee().returnUserAccount().setPassword(password);
                    r.getBusinessEmployee().setUserName(userName);
                    r.getBusinessEmployee().setUserPassword(password);
                    r.getBusinessEmployee().setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                    r.getBusinessEmployee().setAddress(txtAddress.getText());
                    break;
                }

            }
            this.system.setPharmaOrgDirectory(restos);
            JOptionPane.showMessageDialog(this, "Updated Successfully");

            txtName.setText("");txtUsername.setText("");txtpassword.setText("");
            txtAddress.setText("");txtPhoneNumber.setText("");
            populateTable("Pharma Employee");
        }
        else if(roleSelected == "Defense Employee"){
            DefenseOrgEmployee selectedCustomer = (DefenseOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            String name = txtName.getText();
            String userName = txtUsername.getText();
            String password = txtpassword.getText();
            
            ArrayList<DefenseOrg> restos = this.system.getDefenseDirectory().returnAllDefenseBusinesses();
            for(DefenseOrg r: restos)
            {
                if(r.getBusinessEmployee().getName().equals(selectedCustomer.getName()))
                {
                    r.getBusinessEmployee().setName(name);
                    r.getBusinessEmployee().returnUserAccount().setUsername(userName);
                    r.getBusinessEmployee().returnUserAccount().setPassword(password);
                    r.getBusinessEmployee().setUserName(userName);
                    r.getBusinessEmployee().setUserPassword(password);
                    r.getBusinessEmployee().setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                    r.getBusinessEmployee().setAddress(txtAddress.getText());
                    break;
                }

            }
            this.system.setDefenseOrgDirectory(restos);
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            txtName.setText("");txtUsername.setText("");txtpassword.setText("");
            txtAddress.setText("");txtPhoneNumber.setText("");
            populateTable("Defense Employee");
        }
        else if(roleSelected == "Aviation Employee"){
            AviationOrgEmployee selectedCustomer = (AviationOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            String name = txtName.getText();
            String userName = txtUsername.getText();
            String password = txtpassword.getText();
            
            ArrayList<AviationOrg> restos = this.system.getAviationDirectory().returnAllAviationBusinesss();
            for(AviationOrg r: restos)
            {
                if(r.getBusinessEmployee().getName().equals(selectedCustomer.getName()))
                {
                    r.getBusinessEmployee().setName(name);
                    r.getBusinessEmployee().returnUserAccount().setUsername(userName);
                    r.getBusinessEmployee().returnUserAccount().setPassword(password);
                    r.getBusinessEmployee().setUserName(userName);
                    r.getBusinessEmployee().setUserPassword(password);
                    r.getBusinessEmployee().setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                    r.getBusinessEmployee().setAddress(txtAddress.getText());
                    break;
                }

            }
            this.system.setAviationOrgDirectory(restos);
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            txtName.setText("");txtUsername.setText("");txtpassword.setText("");
            txtAddress.setText("");txtPhoneNumber.setText("");
            populateTable("Aviation Employee");        
        }
        else if(roleSelected == "Scuba Employee"){
            ScubaOrgEmployee selectedCustomer = (ScubaOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            String name = txtName.getText();
            String userName = txtUsername.getText();
            String password = txtpassword.getText();
            
            ArrayList<ScubaOrg> restos = this.system.getScubaOrgDirectory().returnAllScubaBusinesses();
            for(ScubaOrg r: restos)
            {
                if(r.getBusinessEmployee().getName().equals(selectedCustomer.getName()))
                {
                    r.getBusinessEmployee().setName(name);
                    r.getBusinessEmployee().returnUserAccount().setUsername(userName);
                    r.getBusinessEmployee().returnUserAccount().setPassword(password);
                    r.getBusinessEmployee().setUserName(userName);
                    r.getBusinessEmployee().setUserPassword(password);
                    r.getBusinessEmployee().setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                    r.getBusinessEmployee().setAddress(txtAddress.getText());
                    break;
                }

            }
            this.system.setScubaOrgDirectory(restos);
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            txtName.setText("");txtUsername.setText("");txtpassword.setText("");
            txtAddress.setText("");txtPhoneNumber.setText("");
            populateTable("Scuba Employee");
        }
        else if(roleSelected == "WaterPlant Employee"){
            WaterTreatmentOrgAdmin selectedCustomer = (WaterTreatmentOrgAdmin)model.getValueAt(selectedRowIndex, 0);
            String name = txtName.getText();
            String userName = txtUsername.getText();
            String password = txtpassword.getText();
            
            ArrayList<WaterTreatmentOrg> restos = this.system.getWaterTreatementirectory().returnAllWaterTreatmentBusinesses();
            for(WaterTreatmentOrg r: restos)
            {
                if(r.getBusinessEmployee().getName().equals(selectedCustomer.getName()))
                {
                    r.getBusinessEmployee().setName(name);
                    r.getBusinessEmployee().returnUserAccount().setUsername(userName);
                    r.getBusinessEmployee().returnUserAccount().setPassword(password);
                    r.getBusinessEmployee().setUserName(userName);
                    r.getBusinessEmployee().setUserPassword(password);
                    r.getBusinessEmployee().setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                    r.getBusinessEmployee().setAddress(txtAddress.getText());
                    break;
                }

            }
            this.system.setWaterTreatementOrgDirectory(restos);
            JOptionPane.showMessageDialog(this, "Updated Successfully");
            txtName.setText("");txtUsername.setText("");txtpassword.setText("");
            txtAddress.setText("");txtPhoneNumber.setText("");
            populateTable("WaterPlant Employee");
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void btnViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewActionPerformed
        // TODO add your handling code here:
        String roleSelected = comboRole.getSelectedItem().toString();
        int selectedRowIndex = tblCustomerDetails.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCustomerDetails.getModel();
        if(roleSelected == "Pharma Employee"){
            PharmaOrgEmployee selectedCustomer = (PharmaOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            txtName.setText("");
            txtName.setText(selectedCustomer.getName());
            txtUsername.setText("");
            txtUsername.setText(selectedCustomer.getUserName());
            txtpassword.setText("");
            txtpassword.setText(selectedCustomer.getUserPassword());
            txtAddress.setText("");
            txtAddress.setText(selectedCustomer.getAddress());
            txtPhoneNumber.setText("");
            txtPhoneNumber.setText(String.valueOf(selectedCustomer.getPhoneNumber()));
        }
        else if(roleSelected == "Defense Employee"){
            DefenseOrgEmployee selectedCustomer = (DefenseOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            txtName.setText("");
            txtName.setText(selectedCustomer.getName());
            txtUsername.setText("");
            txtUsername.setText(selectedCustomer.getUserName());
            txtpassword.setText("");
            txtpassword.setText(selectedCustomer.getUserPassword());
            txtAddress.setText("");
            txtAddress.setText(selectedCustomer.getAddress());
            txtPhoneNumber.setText("");
            txtPhoneNumber.setText(String.valueOf(selectedCustomer.getPhoneNumber()));
        }
        else if(roleSelected == "Aviation Employee"){
            AviationOrgEmployee selectedCustomer = (AviationOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            txtName.setText("");
            txtName.setText(selectedCustomer.getName());
            txtUsername.setText("");
            txtUsername.setText(selectedCustomer.getUserName());
            txtpassword.setText("");
            txtpassword.setText(selectedCustomer.getUserPassword());
            txtAddress.setText("");
            txtAddress.setText(selectedCustomer.getAddress());
            txtPhoneNumber.setText("");
            txtPhoneNumber.setText(String.valueOf(selectedCustomer.getPhoneNumber()));
        }
        else if(roleSelected == "Scuba Employee"){
            ScubaOrgEmployee selectedCustomer = (ScubaOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            txtName.setText("");
            txtName.setText(selectedCustomer.getName());
            txtUsername.setText("");
            txtUsername.setText(selectedCustomer.getUserName());
            txtpassword.setText("");
            txtpassword.setText(selectedCustomer.getUserPassword());
            txtAddress.setText("");
            txtAddress.setText(selectedCustomer.getAddress());
            txtPhoneNumber.setText("");
            txtPhoneNumber.setText(String.valueOf(selectedCustomer.getPhoneNumber()));
        }
        else{
            WaterTreatmentOrgEmployee selectedCustomer = (WaterTreatmentOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            txtName.setText("");
            txtName.setText(selectedCustomer.getName());
            txtUsername.setText("");
            txtUsername.setText(selectedCustomer.getUserName());
            txtpassword.setText("");
            txtpassword.setText(selectedCustomer.getUserPassword());
            txtAddress.setText("");
            txtAddress.setText(selectedCustomer.getAddress());
            txtPhoneNumber.setText("");
            txtPhoneNumber.setText(String.valueOf(selectedCustomer.getPhoneNumber()));
        }
    }//GEN-LAST:event_btnViewActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCustomerDetails.getSelectedRow();
        String roleSelected = comboRole.getSelectedItem().toString();

        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to delete");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCustomerDetails.getModel();
        if(roleSelected == "Pharma Employee"){
            PharmaOrgEmployee selectedCustomer = (PharmaOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            // First delete the customer from employee
            this.system.getEmployeeDirectory().deleteEmployee(selectedCustomer.getName());
            // And thne delete the userAccount
            this.system.getUserAccountDirectory().deleteUserAccount(
                this.system.getPharmaDirectory().returnAllPharmaBusinesss().
                        get(selectedRowIndex).getBusinessEmployee().returnUserAccount()
            );
            // finally delete the user from customer directory
            ArrayList<PharmaOrg> pharmaList = system.getPharmaDirectory().returnAllPharmaBusinesss();

            for(PharmaOrg pO : pharmaList){
                if(pO.getBusinessEmployee().getName().equals(selectedCustomer.getName())){
                    pO.setBusinessEmployee(null);break;
                }
            }
            this.system.setPharmaOrgDirectory(pharmaList);
            this.populateTable("Pharma Employee");
        }
        else if(roleSelected == "Defense Employee"){
            DefenseOrgEmployee selectedCustomer = (DefenseOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            // First delete the customer from employee
            this.system.getEmployeeDirectory().deleteEmployee(selectedCustomer.getName());
            // And thne delete the userAccount
            this.system.getUserAccountDirectory().deleteUserAccount(
                this.system.getDefenseDirectory().returnAllDefenseBusinesses().
                        get(selectedRowIndex).getBusinessEmployee().returnUserAccount()
            );
            // finally delete the user from customer directory
            ArrayList<DefenseOrg> defenseList = system.getDefenseDirectory().returnAllDefenseBusinesses();

            for(DefenseOrg pO : defenseList){
                if(pO.getBusinessEmployee().getName().equals(selectedCustomer.getName())){
                    pO.setBusinessEmployee(null);break;
                }
            }
            this.system.setDefenseOrgDirectory(defenseList);
            this.populateTable("Defense Employee");
        }
        else if(roleSelected == "Aviation Employee"){
            AviationOrgEmployee selectedCustomer = (AviationOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            // First delete the customer from employee
            this.system.getEmployeeDirectory().deleteEmployee(selectedCustomer.getName());
            // And thne delete the userAccount
            this.system.getUserAccountDirectory().deleteUserAccount(
                this.system.getAviationDirectory().returnAllAviationBusinesss().
                        get(selectedRowIndex).getBusinessEmployee().returnUserAccount()
            );
            // finally delete the user from customer directory
            ArrayList<AviationOrg> aviationList = system.getAviationDirectory().returnAllAviationBusinesss();

            for(AviationOrg pO : aviationList){
                if(pO.getBusinessEmployee().getName().equals(selectedCustomer.getName())){
                    pO.setBusinessEmployee(null);break;
                }
            }
            this.system.setAviationOrgDirectory(aviationList);
            this.populateTable("Aviation Employee");
        
        }else if(roleSelected == "Scuba Employee"){
            ScubaOrgEmployee selectedCustomer = (ScubaOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            // First delete the customer from employee
            this.system.getEmployeeDirectory().deleteEmployee(selectedCustomer.getName());
            // And thne delete the userAccount
            this.system.getUserAccountDirectory().deleteUserAccount(
                this.system.getScubaOrgDirectory().returnAllScubaBusinesses().
                        get(selectedRowIndex).getBusinessEmployee().returnUserAccount()
            );
            // finally delete the user from customer directory
            ArrayList<ScubaOrg> scubaList = system.getScubaOrgDirectory().returnAllScubaBusinesses();

            for(ScubaOrg pO : scubaList){
                if(pO.getBusinessEmployee().getName().equals(selectedCustomer.getName())){
                    pO.setBusinessEmployee(null);break;
                }
            }
            this.system.setScubaOrgDirectory(scubaList);      
            this.populateTable("Scuba Employee");
        
        }else if(roleSelected == "WaterPlant Employee"){
            WaterTreatmentOrgEmployee selectedCustomer = (WaterTreatmentOrgEmployee)model.getValueAt(selectedRowIndex, 0);
            // First delete the customer from employee
            this.system.getEmployeeDirectory().deleteEmployee(selectedCustomer.getName());
            // And thne delete the userAccount
            this.system.getUserAccountDirectory().deleteUserAccount(
                this.system.getWaterTreatementirectory().returnAllWaterTreatmentBusinesses().
                        get(selectedRowIndex).getBusinessEmployee().returnUserAccount()
            );
            // finally delete the user from customer directory
            ArrayList<WaterTreatmentOrg> scubaList = system.getWaterTreatementirectory().returnAllWaterTreatmentBusinesses();

            for(WaterTreatmentOrg pO : scubaList){
                if(pO.getBusinessEmployee().getName().equals(selectedCustomer.getName())){
                    pO.setBusinessEmployee(null);break;
                }
            }
            this.system.setWaterTreatementOrgDirectory(scubaList);
            this.populateTable("WaterPlant Employee");
        }
        
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void comboRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRoleActionPerformed
        // TODO add your handling code here:
        System.out.println("Selected Role : " + comboRole.getSelectedItem().toString());
        if(comboRole.getSelectedItem().toString().equals("Pharma Employee")){
            populateTable("Pharma Employee");
        }
        else if(comboRole.getSelectedItem().toString().equals("Defense Employee")){
            populateTable("Defense Employee");
        }
        else if(comboRole.getSelectedItem().toString().equals("Aviation Employee")){
            populateTable("Aviation Employee");
        }
        else if(comboRole.getSelectedItem().toString().equals("Scuba Employee")){
            populateTable("Scuba Employee");
        }
        else if(comboRole.getSelectedItem().toString().equals("WaterPlant Employee")){
            populateTable("WaterPlant Employee");
        }
    }//GEN-LAST:event_comboRoleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnView;
    private javax.swing.JComboBox comboRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbName;
    private javax.swing.JLabel lbPassword;
    private javax.swing.JLabel lbPassword1;
    private javax.swing.JLabel lbPassword2;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JLabel lbUsername;
    private javax.swing.JTable tblCustomerDetails;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JPasswordField txtpassword;
    // End of variables declaration//GEN-END:variables

private void populateTable(String roleName){
        System.out.println("Inside method to populate Customer table");
        DefaultTableModel model = (DefaultTableModel) tblCustomerDetails.getModel();
        model.setRowCount(0);
        try{
            if(roleName == "Pharma Employee"){
                for(PharmaOrg cust : this.system.getPharmaDirectory().returnAllPharmaBusinesss()){
                    System.out.println("Inside Pharma Employee Poplate Table : " + cust.getBusinessEmployee());
                    Object[] row = new Object[6];
                    row[0] = cust.getBusinessEmployee();
                    row[1] = cust.getBusinessEmployee().getUserName();
                    row[2] = cust.getBusinessEmployee().getUserPassword();
                    row[3] = cust.getBusinessEmployee().getAddress();
                    row[4] = cust.getBusinessEmployee().getPhoneNumber();
                    row[5] = cust.getBusinessName();
                    model.addRow(row);
                    }
            }
            else if(roleName == "Defense Employee"){
                for(DefenseOrg cust : this.system.getDefenseDirectory().returnAllDefenseBusinesses()){
//                    System.out.println(cust.getHospitalAdmin());
                    Object[] row = new Object[6];
                    row[0] = cust.getBusinessEmployee();
                    row[1] = cust.getBusinessEmployee().getUserName();
                    row[2] = cust.getBusinessEmployee().getUserPassword();
                    row[3] = cust.getBusinessEmployee().getAddress();
                    row[4] = cust.getBusinessEmployee().getPhoneNumber();
                    row[5] = cust.getBusinessName();
                    model.addRow(row);
                    }
            }
            else if(roleName == "Aviation Employee"){
                for(AviationOrg cust : this.system.getAviationDirectory().returnAllAviationBusinesss()){
//                    System.out.println(cust.getHospitalAdmin());
                    Object[] row = new Object[6];
                    row[0] = cust.getBusinessEmployee();
                    row[1] = cust.getBusinessEmployee().getUserName();
                    row[2] = cust.getBusinessEmployee().getUserPassword();
                    row[3] = cust.getBusinessEmployee().getAddress();
                    row[4] = cust.getBusinessEmployee().getPhoneNumber();
                    row[5] = cust.getBusinessName();
                    model.addRow(row);
                    }
            }
            else if(roleName == "Scuba Employee"){
                for(ScubaOrg cust : this.system.getScubaOrgDirectory().returnAllScubaBusinesses()){
//                    System.out.println(cust.getHospitalAdmin());
                    Object[] row = new Object[6];
                    row[0] = cust.getBusinessEmployee();
                    row[1] = cust.getBusinessEmployee().getUserName();
                    row[2] = cust.getBusinessEmployee().getUserPassword();
                    row[3] = cust.getBusinessEmployee().getAddress();
                    row[4] = cust.getBusinessEmployee().getPhoneNumber();
                    row[5] = cust.getBusinessName();
                    model.addRow(row);
                    }
            }
            else if(roleName == "WaterPlant Employee"){
                for(WaterTreatmentOrg cust : this.system.getWaterTreatementirectory().returnAllWaterTreatmentBusinesses()){
//                    System.out.println(cust.getHospitalAdmin());
                    Object[] row = new Object[6];
                    row[0] = cust.getBusinessEmployee();
                    row[1] = cust.getBusinessEmployee().getUserName();
                    row[2] = cust.getBusinessEmployee().getUserPassword();
                    row[3] = cust.getBusinessEmployee().getAddress();
                    row[4] = cust.getBusinessEmployee().getPhoneNumber();
                    row[5] = cust.getBusinessName();
                    model.addRow(row);
                    }
            }
        }catch(NullPointerException e){
            System.out.println("Null pointer exception occured as there is no hospital Admin data");
        }
    }
}
