/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.AviationOrg.AviationOrg;
import Business.AviationOrg.AviationOrgAdmin;
import Business.AviationOrg.AviationOrgEmployee;
import Business.Customer.Customer;
import Business.CustomerSales.SalesEmployee;
import Business.CustomerSales.SalesManager;
import Business.DefenseOrg.DefenseOrg;
import Business.DefenseOrg.DefenseOrgAdmin;
import Business.DefenseOrg.DefenseOrgEmployee;
import Business.DeliveryMan.DeliveryMan;
import Business.OxygenPlant.OxygenPlant;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Hospital.Hospital;
import Business.Hospital.HospitalAdmin;
import Business.Hospital.HospitalEmployee;
import Business.NGO.NGOAdmin;
import Business.NGO.NGOEmployee;
import Business.OxygenPlant.OxygenPlant;
import Business.PharmaOrg.PharmaOrg;
import Business.PharmaOrg.PharmaOrgAdmin;
import Business.PharmaOrg.PharmaOrgEmployee;
import Business.Role.AdminRole;
import Business.Role.AviationOrgEmployeeRole;
import Business.Role.AviationOrgManagerRole;
import Business.Role.CustomerRole;
import Business.Role.DefenseOrgEmployeeRole;
import Business.Role.DefenseOrgManagerRole;
import Business.Role.DeliverManRole;
import Business.Role.HospitalAdminRole;
import Business.Role.HospitalOperationsAdminRole;
import Business.Role.NGOAdminRole;
import Business.Role.PharmaEmployeeRole;
import Business.Role.PharmaManagerRole;
import Business.Role.SalesEmployeeRole;
import Business.Role.SalesManagerRole;
import Business.Role.ScubaOrgEmployeeRole;
import Business.Role.ScubaOrgManagerRole;
import Business.Role.WaterPlantEmployeeRole;
import Business.Role.WaterPlantManagerRole;
import Business.ScubaOrg.ScubaOrg;
import Business.ScubaOrg.ScubaOrgAdmin;
import Business.ScubaOrg.ScubaOrgEmployee;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import Business.Validation.Validation;
import Business.WaterDepartment.WaterTreatmentOrg;
import Business.WaterDepartment.WaterTreatmentOrgAdmin;
import Business.WaterDepartment.WaterTreatmentOrgEmployee;
import java.awt.Dimension;
import javax.swing.UIManager;
import userinterface.CompanySales.SalesExecutiveWorkAreaJPanel;

/**
 *
 * @author Nithin Bharadwaj
 */
public class CreateUser extends javax.swing.JPanel {

    /**
     * Creates new form CreateUser
     */
    JPanel userProcessContainer;
    EcoSystem system;
    Validation validation;
    
    public CreateUser(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.system = system;
        this.userProcessContainer = userProcessContainer;
        this.validation = new Validation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPasswordField1 = new javax.swing.JPasswordField();
        btnGoBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBusinessName = new javax.swing.JTextField();
        btnSubmit = new javax.swing.JButton();
        comboRole = new javax.swing.JComboBox();
        txtPassword = new javax.swing.JPasswordField();
        txtPasswordConfirmation = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtPhoneNumber = new javax.swing.JTextField();
        imgLabel = new javax.swing.JLabel();

        jPasswordField1.setText("jPasswordField1");

        setBackground(new java.awt.Color(247, 247, 247));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnGoBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/back.png"))); // NOI18N
        btnGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBackActionPerformed(evt);
            }
        });
        add(btnGoBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(36, 26, 60, 54));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Create New User");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(148, 41, 299, 39));

        jLabel2.setText("Name :");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(226, 103, -1, -1));
        add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 98, 182, -1));

        jLabel3.setText("Username :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 147, -1, -1));
        add(txtUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 142, 182, -1));

        jLabel4.setText("Password :");
        add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(203, 191, -1, -1));

        jLabel5.setText("Confirm Password :");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 240, -1, -1));

        jLabel6.setText("Role :");
        add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 370, -1, -1));

        jLabel7.setText(" Company/Hospital Name :");
        add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 410, -1, -1));
        add(txtBusinessName, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 407, 182, -1));

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(239, 451, 77, -1));

        comboRole.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Customer", "Aviation Manager", "Aviation Employee", "Defense Manager", "Defense Employee", "Hospital Admin", "Hospital Employee", "Sales Manager", "Sales Executive", "NGO Administrator", "NGO Employee", "Scuba Manager", "Scuba Employee", "Pharma Manager", "Pharma Employee", "WaterPlant Admin", "WaterPlant Employee", "Delivery Man" }));
        comboRole.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboRoleActionPerformed(evt);
            }
        });
        add(comboRole, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 362, 180, -1));
        add(txtPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 186, 182, -1));
        add(txtPasswordConfirmation, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 230, 182, -1));

        jLabel8.setText("Address :");
        add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 280, -1, -1));

        jLabel9.setText("Phone Number :");
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 320, -1, -1));
        add(txtAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 274, 182, -1));
        add(txtPhoneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(288, 318, 182, -1));

        imgLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/account-dribble.gif"))); // NOI18N
        add(imgLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 40, 560, 510));
    }// </editor-fold>//GEN-END:initComponents

    private void btnGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBackActionPerformed
        // TODO add your handling code here:
        this.userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        Component[] comps = this.userProcessContainer.getComponents();
        for(Component comp : comps){
            if(comp instanceof SystemAdminWorkAreaJPanel){
                SystemAdminWorkAreaJPanel systemAdminWorkAreaJPanel= (SystemAdminWorkAreaJPanel) comp;
                systemAdminWorkAreaJPanel.populateTree();
            }
        }
    }//GEN-LAST:event_btnGoBackActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        // TODO add your handling code here:
        UserAccountDirectory usersList = this.system.getUserAccountDirectory();
        String role = (String) comboRole.getSelectedItem();
        Employee employee = new Employee();
        employee.setName(txtName.getText());
        boolean userDoNotExists = true;
        ArrayList<UserAccount> users = usersList.getUserAccountList();
        for(UserAccount ua : users)
        {
            if(ua.getUsername().equals(txtUsername.getText()))
                userDoNotExists = false;
        }
        if(txtPassword.getText().equals(txtPasswordConfirmation.getText()))
        {
            boolean nameValidation = this.validation.validateName(txtName);
            boolean userNameValidation = this.validation.validateUserName(txtUsername);
            boolean addressValidation = this.validation.validateAddress(txtAddress);
            boolean phoneNumberValidation = this.validation.validatePhoneNumber(txtPhoneNumber);
            if(nameValidation && userNameValidation && addressValidation && phoneNumberValidation){
                if(role.equals("Customer")){
                    usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new CustomerRole());
                    UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                    Customer customer = new Customer(ua);
                    customer.setAddress(txtAddress.getText());
                    customer.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                    System.out.println(customer.getName());
                    System.out.println(system.getCustomerDirectory());
                    system.getCustomerDirectory().addCustomer(customer);
                    JOptionPane.showMessageDialog(this, "Added the customer successfully");
                    this.clearText();
                }
                else if(role.equals("Aviation Manager")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getAviationDirectory().getBusiness(businessName)==null){
                        AviationOrg aviationObj = new AviationOrg(businessName, txtAddress.getText());
                        aviationObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new AviationOrgManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        AviationOrgAdmin businessAdmin = new AviationOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        aviationObj.setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Aviation Business & Manager successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new AviationOrgManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        AviationOrgAdmin businessAdmin = new AviationOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getAviationDirectory().getBusiness(txtBusinessName.getText()).setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Aviation Business manager successfully");
                    }
                    this.clearText();
                    
                }
                else if(role.equals("Aviation Employee")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getAviationDirectory().getBusiness(businessName)==null){
                        AviationOrg aviationObj = new AviationOrg(businessName, txtAddress.getText());
                        aviationObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new AviationOrgEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        AviationOrgEmployee businessEmployee = new AviationOrgEmployee(ua);
                        businessEmployee.setAddress(txtAddress.getText());
                        businessEmployee.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        aviationObj.setBusinessEmployee(businessEmployee);
                        JOptionPane.showMessageDialog(this, "Added the Aviation Business & Employee successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new AviationOrgEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        AviationOrgEmployee businessEmployee = new AviationOrgEmployee(ua);
                        businessEmployee.setAddress(txtAddress.getText());
                        businessEmployee.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getAviationDirectory().getBusiness(txtBusinessName.getText()).setBusinessEmployee(businessEmployee);
                        JOptionPane.showMessageDialog(this, "Added the Aviation Business Employee successfully");
                    }
                    this.clearText();
                }
                else if(role.equals("Defense Manager")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getDefenseDirectory().getBusiness(businessName)==null){
                        DefenseOrg defenseObj = new DefenseOrg(businessName, txtAddress.getText());
                        defenseObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new DefenseOrgManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        DefenseOrgAdmin businessAdmin = new DefenseOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        defenseObj.setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Defense Business & Manager successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new DefenseOrgManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        DefenseOrgAdmin businessAdmin = new DefenseOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getDefenseDirectory().getBusiness(txtBusinessName.getText()).setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Defense Manager successfully");
                    }
                    this.clearText();
                }
                else if(role.equals("Defense Employee")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getDefenseDirectory().getBusiness(businessName)==null){
                        DefenseOrg defenseObj = new DefenseOrg(businessName, txtAddress.getText());
                        defenseObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new DefenseOrgEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        DefenseOrgEmployee businessEmployee = new DefenseOrgEmployee(ua);
                        businessEmployee.setAddress(txtAddress.getText());
                        businessEmployee.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        defenseObj.setBusinessEmployee(businessEmployee);
                        JOptionPane.showMessageDialog(this, "Added the Defense Business & Employee successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new DefenseOrgEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        DefenseOrgEmployee businessEmployee = new DefenseOrgEmployee(ua);
                        businessEmployee.setAddress(txtAddress.getText());
                        businessEmployee.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getDefenseDirectory().getBusiness(txtBusinessName.getText()).setBusinessEmployee(businessEmployee);
                        JOptionPane.showMessageDialog(this, "Added the Defense Employee successfully");
                    }
                    this.clearText();
                }
                else if(role.equals("Hospital Employee")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String hospitalName = txtBusinessName.getText();
                    if(system.getHospitalDirectory().getHospital(hospitalName)==null){
                        Hospital hospObj = new Hospital(hospitalName, txtAddress.getText());
                        hospObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new HospitalOperationsAdminRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        HospitalEmployee hospitalEmp = new HospitalEmployee(ua);
                        hospitalEmp.setAddress(txtAddress.getText());
                        hospitalEmp.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        hospObj.setHospitalEmployee(hospitalEmp);
                        JOptionPane.showMessageDialog(this, "Added the Hospital Employee successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new HospitalOperationsAdminRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        HospitalEmployee hospitalEmp = new HospitalEmployee(ua);
                        hospitalEmp.setAddress(txtAddress.getText());
                        hospitalEmp.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getHospitalDirectory().getHospital(txtBusinessName.getText()).setHospitalEmployee(hospitalEmp);
                        JOptionPane.showMessageDialog(this, "Added the Hospital Employee successfully");
                    }
                    this.clearText();
                }
                else if(role.equals("Sales Manager")){
                    boolean userExists = false;
                    for(SalesManager se : this.system.getSalesDirectory().returnSalesManagerDetails()){
                        if(se.getName().equals(txtName.getText())){
                            JOptionPane.showMessageDialog(this, "Sales Manager Exists with same name");
                            return;
                        }
                    }
                    if(userExists==false){
                       usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new SalesManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        SalesManager salesManager = new SalesManager(ua);
                        salesManager.setAddress(txtAddress.getText());
                        salesManager.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        this.system.getSalesDirectory().addManager(salesManager);
                        JOptionPane.showMessageDialog(this, "Added the Hospital Employee successfully"); 
                    }
                    
                }
                else if(role.equals("Sales Executive")){
                    boolean userExists = false;
                    for(SalesEmployee se : this.system.getSalesDirectory().returnEmployeeDetails()){
                        if(se.getName().equals(txtName.getText())){
                            JOptionPane.showMessageDialog(this, "Sales Executive Exists with same name");
                            return;
                        }
                    }
                    if(userExists==false){
                       usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new SalesEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        SalesEmployee salesEmployee = new SalesEmployee(ua);
                        salesEmployee.setAddress(txtAddress.getText());
                        salesEmployee.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        this.system.getSalesDirectory().addEmployee(salesEmployee);
                        JOptionPane.showMessageDialog(this, "Added the Sales Executive successfully"); 
                    }
                    
                    this.clearText();
                }
                else if(role.equals("NGO Administrator")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    boolean userExists = false;
                    int adminCounter = 0;
                    for(NGOAdmin ngoAdmin : system.getNGODirectory().returnAdminDetails()){
                        if(ngoAdmin.getBusinessName().toString().equals(businessName)){
                            userExists = true;
                            usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new NGOAdminRole());
                            UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                            NGOAdmin ngoAdminObj = new NGOAdmin(ua);
                            system.getNGODirectory().updateAdminDetails(ngoAdminObj, adminCounter);
                            break;
                        }
                        adminCounter++;
                    }
                    
                    if(userExists == false){
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new NGOAdminRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        NGOAdmin ngoAdminObj = new NGOAdmin(ua);
                        system.getNGODirectory().addAdmin(ngoAdminObj);
                    }
                    this.clearText();
                }
                else if(role.equals("NGO Employee")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    boolean userExists = false;
                    int empCounter = 0;
                    for(NGOEmployee ngoEmp : system.getNGODirectory().returnEmployeeDetails()){
                        if(ngoEmp.getBusinessName().toString().equals(businessName)){
                            userExists = true;
                            usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new NGOAdminRole());
                            UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                            NGOEmployee ngoEmpObj = new NGOEmployee(ua);
                            system.getNGODirectory().updateEmployeeDetails(ngoEmpObj, empCounter);
                            break;
                        }
                        empCounter++;
                    }
                    
                    if(userExists == false){
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new NGOAdminRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        NGOEmployee ngoEmpObj = new NGOEmployee(ua);
                        system.getNGODirectory().addEmployee(ngoEmpObj);
                    }
                    this.clearText();
                }
                else if(role.equals("Scuba Employee")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getScubaOrgDirectory().getBusiness(businessName)==null){
                        ScubaOrg scubaObj = new ScubaOrg(businessName, txtAddress.getText());
                        scubaObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new ScubaOrgEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        ScubaOrgEmployee businessEmployee = new ScubaOrgEmployee(ua);
                        businessEmployee.setAddress(txtAddress.getText());
                        businessEmployee.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        scubaObj.setBusinessEmployee(businessEmployee);
                        JOptionPane.showMessageDialog(this, "Added the Scuba Business & Employee successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new ScubaOrgEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        ScubaOrgEmployee businessEmp = new ScubaOrgEmployee(ua);
                        businessEmp.setAddress(txtAddress.getText());
                        businessEmp.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getScubaOrgDirectory().getBusiness(txtBusinessName.getText()).setBusinessEmployee(businessEmp);
                        JOptionPane.showMessageDialog(this, "Added the Scuba Business Employee successfully");
                    }
                    this.clearText();
                    
                }
                else if(role.equals("Scuba Manager")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getScubaOrgDirectory().getBusiness(businessName)==null){
                        ScubaOrg scubaObj = new ScubaOrg(businessName, txtAddress.getText());
                        scubaObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new ScubaOrgManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        ScubaOrgAdmin businessAdmin = new ScubaOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        scubaObj.setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Scuba Business & Manager successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new ScubaOrgManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        ScubaOrgAdmin businessAdmin = new ScubaOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getScubaOrgDirectory().getBusiness(txtBusinessName.getText()).setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Scuba Business manager successfully");
                    }
                    this.clearText();
                    
                }
                else if(role.equals("Pharma Manager")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getPharmaDirectory().getBusiness(businessName)==null){
                        PharmaOrg pharmaObj = new PharmaOrg(businessName, txtAddress.getText());
                        pharmaObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new PharmaManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        PharmaOrgAdmin businessAdmin = new PharmaOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        pharmaObj.setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Pharma Business & Manager successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new PharmaManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        PharmaOrgAdmin businessAdmin = new PharmaOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getPharmaDirectory().getBusiness(txtBusinessName.getText()).setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Pharma Business manager successfully");
                    }
                    this.clearText();
                    
                }
                else if(role.equals("Pharma Employee")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getPharmaDirectory().getBusiness(businessName)==null){
                        PharmaOrg pharmaObj = new PharmaOrg(businessName, txtAddress.getText());                        
                        pharmaObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new PharmaEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        PharmaOrgEmployee businessEmpl = new PharmaOrgEmployee(ua);
                        businessEmpl.setAddress(txtAddress.getText());
                        businessEmpl.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        pharmaObj.setBusinessEmployee(businessEmpl);
                        JOptionPane.showMessageDialog(this, "Added the Scuba Business & Manager successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new PharmaEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        PharmaOrgEmployee businessEmpl = new PharmaOrgEmployee(ua);
                        businessEmpl.setAddress(txtAddress.getText());
                        businessEmpl.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getPharmaDirectory().getBusiness(txtBusinessName.getText()).setBusinessEmployee(businessEmpl);
                        JOptionPane.showMessageDialog(this, "Added the Scuba Business manager successfully");
                    }
                    this.clearText();
                }
                else if(role.equals("WaterPlant Admin")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getWaterTreatementirectory().getBusiness(businessName)==null){
                        WaterTreatmentOrg waterPlantObj = new WaterTreatmentOrg(businessName, txtAddress.getText());
                        waterPlantObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new WaterPlantManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        WaterTreatmentOrgAdmin businessAdmin = new WaterTreatmentOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        waterPlantObj.setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Water Treatment PLant Business & Manager successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new PharmaManagerRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        WaterTreatmentOrgAdmin businessAdmin = new WaterTreatmentOrgAdmin(ua);
                        businessAdmin.setAddress(txtAddress.getText());
                        businessAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getWaterTreatementirectory().getBusiness(txtBusinessName.getText()).setBusinessAdmin(businessAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Treatment PLant Business manager successfully");
                    }
                    this.clearText();
                }
                else if(role.equals("WaterPlant Employee")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String businessName = txtBusinessName.getText();
                    if(system.getWaterTreatementirectory().getBusiness(businessName)==null){
                        WaterTreatmentOrg waterPlantObj = new WaterTreatmentOrg(businessName, txtAddress.getText());
                        waterPlantObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new WaterPlantEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        WaterTreatmentOrgEmployee businessEmployee = new WaterTreatmentOrgEmployee(ua);
                        businessEmployee.setAddress(txtAddress.getText());
                        businessEmployee.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        waterPlantObj.setBusinessEmployee(businessEmployee);
                        JOptionPane.showMessageDialog(this, "Added the Water Treatment Employee & Business successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new WaterPlantEmployeeRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        WaterTreatmentOrgEmployee businessEmp = new WaterTreatmentOrgEmployee(ua);
                        businessEmp.setAddress(txtAddress.getText());
                        businessEmp.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getWaterTreatementirectory().getBusiness(txtBusinessName.getText()).setBusinessEmployee(businessEmp);
                        JOptionPane.showMessageDialog(this, "Added the Treatment PLant Business Employee successfully");
                    }
                    this.clearText();
                }
                else if(role.equals("Delivery Man")){
                    usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new DeliverManRole());
                    UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                    DeliveryMan deliveryAgent = new DeliveryMan(ua);
                    deliveryAgent.setAddress(txtAddress.getText());
                    deliveryAgent.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                    deliveryAgent.setStatus("Available");
                    system.getDeliveryManDirectory().addDeliveryAgent(deliveryAgent);
                    JOptionPane.showMessageDialog(this, "Added the DeliveryMan successfully");
                    this.clearText();
                }
                else if(role.equals("Hospital Admin")){
                    if(txtBusinessName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(this, "Business name should not be empty");
                        return;
                    }
                    
                    String hospitalName = txtBusinessName.getText();
                    if(system.getHospitalDirectory().getHospital(hospitalName)==null){
                        Hospital hospObj = new Hospital(hospitalName, txtAddress.getText());
                        hospObj.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new HospitalAdminRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        HospitalAdmin hospitalAdmin = new HospitalAdmin(ua);
                        hospitalAdmin.setAddress(txtAddress.getText());
                        hospitalAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText()));
                        hospObj.setHospitalAdmin(hospitalAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Hospital Admin successfully");
                    }
                    else{
                        usersList.createUserAccount(txtUsername.getText(),txtPassword.getText(), employee, new HospitalAdminRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        HospitalAdmin hospitalAdmin = new HospitalAdmin(ua);
                        hospitalAdmin.setAddress(txtAddress.getText());
                        hospitalAdmin.setPhoneNumber(Long.parseLong(txtPhoneNumber.getText())); 
                        system.getHospitalDirectory().getHospital(txtBusinessName.getText()).setHospitalAdmin(hospitalAdmin);
                        JOptionPane.showMessageDialog(this, "Added the Hospital Admin successfully");
                    }
                    this.clearText();
                    
                }
                else if(role.equals("Oxygen Plant Admin")){
                    boolean restaurantValidation = this.validation.validateName(txtBusinessName);
                    if(restaurantValidation){
                        usersList.createUserAccount(txtUsername.getText(),
                                txtPassword.getText(), employee, new AdminRole());
                        UserAccount ua = usersList.getUserAccount(txtUsername.getText());
                        OxygenPlant restaurantData = new OxygenPlant(txtBusinessName.getText(),
                                txtAddress.getText(), txtName.getText(),
                                Long.parseLong(txtPhoneNumber.getText()), ua);
                        system.getOxygenPlantDirectory().addOxygenPlant(restaurantData);
                        JOptionPane.showMessageDialog(this, "Added the Business and Admin Successfully");
                        this.clearText();
                    }
                    else{
                        JOptionPane.showMessageDialog(this, "Invalid Plant Name!!!!");
//                        this.clearText();
                    }
                    
                }
            }else{
                String errorMessage = String.format("Profile info NOT SAVED!!! \n"
                    + "Name validation Status: %s \n UserName Validation : %s \n" +
                    "Phone Number Validation : %s\n" +
                    "Address Validation : %s \n"
                                , nameValidation, userNameValidation,
                                phoneNumberValidation, addressValidation
                                );
                UIManager.put("OptionPane.minimumSize",new Dimension(250,250)); 
                JOptionPane.showMessageDialog(this, errorMessage);
                this.clearText();
            }
            
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

    private void comboRoleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboRoleActionPerformed
        // TODO add your handling code here:
        System.out.println("Selected Role : " + comboRole.getSelectedItem().toString());
        if(comboRole.getSelectedItem().toString().equals("Customer")
                || comboRole.getSelectedItem().toString().equals("Delivery Man")
           || comboRole.getSelectedItem().toString().equals("Sales Executive") ||
                comboRole.getSelectedItem().toString().equals("Sales Manager")){
            txtBusinessName.setEditable(false);
        }
        else{
            txtBusinessName.setEditable(true);
        }
    }//GEN-LAST:event_comboRoleActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGoBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox comboRole;
    private javax.swing.JLabel imgLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtBusinessName;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtPasswordConfirmation;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

    private void clearText(){
        JTextField[] textFields = {txtName,txtPassword,txtPasswordConfirmation,
                    txtBusinessName, txtUsername, txtAddress, txtPhoneNumber};
        for(JTextField pk : textFields){
            pk.setText("");
        }
//        txtPassword.setText("");
//        txtPasswordConfirmation.setText("");
        
    }

}
