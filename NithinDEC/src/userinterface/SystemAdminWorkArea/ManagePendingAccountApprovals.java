/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.SystemAdminWorkArea;

import Business.Customer.Customer;
import Business.DeliveryMan.DeliveryMan;
import Business.EcoSystem;
import Business.Employee.Employee;
import Business.PendingAccountApproval;
import Business.Role.CustomerRole;
import Business.Role.DeliverManRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import javamailapp.javamail.JavaMailSystem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Nithin Bharadwaj
 */
public class ManagePendingAccountApprovals extends javax.swing.JPanel {

    /**
     * Creates new form UpdateCustomerDetails
     */
    JPanel userProcessContainer;
    EcoSystem system;
    
    public ManagePendingAccountApprovals(JPanel userProcessContainer, EcoSystem system) {
        initComponents();
        this.system = system;
        this.userProcessContainer = userProcessContainer;
        this.populateTable();
//        txtName.setEditable(false);
//        txtUsername.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCustomerDetails = new javax.swing.JTable();
        btnApprove = new javax.swing.JButton();
        btnReject = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setBackground(new java.awt.Color(246, 252, 255));

        lbTitle.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbTitle.setText("Manage Pending Account Approvals");

        tblCustomerDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "UserName", "Email", "Address", "PhoneNumber", "Role"
            }
        ));
        jScrollPane1.setViewportView(tblCustomerDetails);

        btnApprove.setText("Approve");
        btnApprove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveActionPerformed(evt);
            }
        });

        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/back.png"))); // NOI18N
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(45, 45, 45)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(72, 72, 72)
                            .addComponent(lbTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 453, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(103, 103, 103)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnApprove, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(btnReject, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(62, 62, 62)))
                .addContainerGap(126, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbTitle)
                    .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReject)
                    .addComponent(btnApprove))
                .addContainerGap(113, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        this.userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
        Component[] comps = this.userProcessContainer.getComponents();
        for(Component comp : comps){
            if(comp instanceof SystemAdminWorkAreaJPanel){
                SystemAdminWorkAreaJPanel systemAdminWorkAreaJPanel= (SystemAdminWorkAreaJPanel) comp;
                systemAdminWorkAreaJPanel.populateTree();
            }
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCustomerDetails.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to View");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCustomerDetails.getModel();
        PendingAccountApproval selectedCustomer = (PendingAccountApproval)model.getValueAt(selectedRowIndex, 0);
        
        UserAccountDirectory usersList = this.system.getUserAccountDirectory();
        String role = selectedCustomer.getRole();
        Employee employee = new Employee();
        employee.setName(selectedCustomer.getName());
        boolean userDoNotExists = true;
        ArrayList<UserAccount> users = usersList.getUserAccountList();
        if(role.equals("Customer")){
            usersList.createUserAccount(selectedCustomer.getUserName(), selectedCustomer.getPassword(),
                    employee, new CustomerRole());
            UserAccount ua = usersList.getUserAccount(selectedCustomer.getUserName());
            Customer customer = new Customer(ua);
            customer.setAddress(selectedCustomer.getAddress());
            customer.setPhoneNumber(selectedCustomer.getPhoneNumber());
            system.getCustomerDirectory().addCustomer(customer);
             try {
                JavaMailSystem.sendMail(selectedCustomer.getEmail(),"Account Creation Request-Update",
                                "Your request has been Approved. Please log in to the system");
            } catch (Exception ex) {
                System.err.println("Exception Ocurred : " + ex);
            }
            JOptionPane.showMessageDialog(this, "Added the customer successfully");
        }
        else if(role.equals("Delivery Man")){
            usersList.createUserAccount(selectedCustomer.getUserName(), selectedCustomer.getPassword(),
                                employee, new DeliverManRole());
            UserAccount ua = usersList.getUserAccount(selectedCustomer.getUserName());
            DeliveryMan deliveryAgent = new DeliveryMan(ua);
            deliveryAgent.setAddress(selectedCustomer.getAddress());
            deliveryAgent.setPhoneNumber(selectedCustomer.getPhoneNumber()); 
            deliveryAgent.setStatus("Available");
            system.getDeliveryManDirectory().addDeliveryAgent(deliveryAgent);
             try {
                JavaMailSystem.sendMail(selectedCustomer.getEmail(),"Account Creation Request-Update",
                                "Your request has been Approved. Please log in to the system");
            } catch (Exception ex) {
                System.err.println("Exception Ocurred : " + ex);
            }
            JOptionPane.showMessageDialog(this, "Added the DeliveryMan successfully");
        }
        
        this.system.getPendingAccountCreation().remove(selectedCustomer);
        this.populateTable();
    }//GEN-LAST:event_btnApproveActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblCustomerDetails.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select a row to Reject");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblCustomerDetails.getModel();
        PendingAccountApproval selectedCustomer = (PendingAccountApproval)model.getValueAt(selectedRowIndex, 0);
        this.system.getPendingAccountCreation().remove(selectedCustomer);
        try {
                JavaMailSystem.sendMail(selectedCustomer.getEmail(),"Account Creation Request-Update",
                                "Your request has been Rejected");
            } catch (Exception ex) {
                System.err.println("Exception Ocurred : " + ex);
            }
        JOptionPane.showMessageDialog(this, "Rejected the request successfully");
        this.system.getPendingAccountCreation().remove(selectedCustomer);
        for(PendingAccountApproval ck : this.system.getPendingAccountCreation()){
            System.out.println(ck.getName());
        }
        this.populateTable();
    }//GEN-LAST:event_btnRejectActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApprove;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReject;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JTable tblCustomerDetails;
    // End of variables declaration//GEN-END:variables

    private void populateTable(){
        System.out.println("Inside method to populate Pending Approval table");
        DefaultTableModel model = (DefaultTableModel) tblCustomerDetails.getModel();
        model.setRowCount(0);

        for(PendingAccountApproval cust : this.system.getPendingAccountCreation()){
            System.out.println(cust);
            Object[] row = new Object[6];
            row[0] = cust;
            row[1] = cust.getUserName();
            row[2] = cust.getEmail();
            row[3] = cust.getAddress();
            row[4] = cust.getPhoneNumber();
            row[5] = cust.getRole();
            model.addRow(row);
        }
    }

}
